apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: n8n
  labels:
    app.kubernetes.io/name: n8n
    app.kubernetes.io/component: workflow-automation
spec:
  # Default replica count (overridden by overlays)
  replicas: 1

  # Deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: n8n
      app.kubernetes.io/component: workflow-automation

  template:
    metadata:
      labels:
        app.kubernetes.io/name: n8n
        app.kubernetes.io/component: workflow-automation
      annotations:
        # Force restart on config change
        checksum/config: "placeholder"
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Init container to wait for PostgreSQL
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z postgres 5432; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done
          echo "PostgreSQL is up - continuing"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL

      containers:
      - name: n8n
        # n8n image - update version as needed
        image: n8nio/n8n:latest
        imagePullPolicy: IfNotPresent

        # Security context for the container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # n8n needs to write data
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: n8n-config
        - secretRef:
            name: n8n-secrets

        # Additional environment variables for database connection
        env:
        - name: DB_TYPE
          value: "postgresdb"
        - name: DB_POSTGRESDB_HOST
          value: "postgres"
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        # Database credentials come from secret via envFrom

        # Resource limits and requests (overridden by overlays)
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 512Mi

        # Health checks
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Startup probe for initial startup
        startupProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

        # Port configuration
        ports:
        - name: http
          containerPort: 5678
          protocol: TCP

        # Volume mounts
        volumeMounts:
        - name: n8n-data
          mountPath: /home/node/.n8n
        - name: tmp
          mountPath: /tmp

      # Volumes
      volumes:
      - name: n8n-data
        persistentVolumeClaim:
          claimName: n8n-data
      - name: tmp
        emptyDir: {}

      # Scheduling preferences
      affinity:
        # Prefer to schedule on different nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - n8n
              topologyKey: kubernetes.io/hostname

---
# Persistent Volume Claim for n8n data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-data
  namespace: n8n
  labels:
    app.kubernetes.io/name: n8n
    app.kubernetes.io/component: workflow-automation
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  # Optional: Specify storage class
  # storageClassName: fast-ssd