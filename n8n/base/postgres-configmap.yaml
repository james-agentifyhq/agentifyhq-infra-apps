apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: n8n
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  init-n8n-user.sh: |
    #!/bin/bash
    # PostgreSQL initialization script to create n8n database user
    # This script runs once when the database is first initialized

    set -e

    echo "=== N8N Database User Initialization Started ==="
    echo "Timestamp: $(date)"
    echo "POSTGRES_USER: ${POSTGRES_USER:-NOT_SET}"
    echo "POSTGRES_DB: ${POSTGRES_DB:-NOT_SET}"
    echo "POSTGRES_NON_ROOT_USER: ${POSTGRES_NON_ROOT_USER:-NOT_SET}"
    echo "POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD:0:4}***"

    # Check if required environment variables are set
    if [ -n "${POSTGRES_NON_ROOT_USER:-}" ] && [ -n "${POSTGRES_NON_ROOT_PASSWORD:-}" ]; then
      echo "Creating n8n database user: ${POSTGRES_NON_ROOT_USER}"

      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      until pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h localhost; do
        echo "PostgreSQL not ready, waiting..."
        sleep 2
      done
      echo "PostgreSQL is ready"

      # Check if user already exists
      if psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "SELECT 1 FROM pg_roles WHERE rolname='${POSTGRES_NON_ROOT_USER}'" | grep -q 1; then
        echo "User ${POSTGRES_NON_ROOT_USER} already exists, skipping creation"
      else
        echo "Creating user ${POSTGRES_NON_ROOT_USER}..."

        # Create the n8n user and grant privileges with detailed logging
        echo "Executing user creation SQL..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "CREATE USER \"${POSTGRES_NON_ROOT_USER}\" WITH PASSWORD '${POSTGRES_NON_ROOT_PASSWORD}';" || {
          echo "ERROR: Failed to create user ${POSTGRES_NON_ROOT_USER}"
          exit 1
        }

        echo "Granting database privileges..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB} TO \"${POSTGRES_NON_ROOT_USER}\";" || {
          echo "ERROR: Failed to grant database privileges"
          exit 1
        }

        echo "Granting schema privileges..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "GRANT ALL ON SCHEMA public TO \"${POSTGRES_NON_ROOT_USER}\";" || {
          echo "ERROR: Failed to grant schema privileges"
          exit 1
        }

        echo "Setting default privileges for tables..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO \"${POSTGRES_NON_ROOT_USER}\";" || {
          echo "ERROR: Failed to set default table privileges"
          exit 1
        }

        echo "Setting default privileges for sequences..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO \"${POSTGRES_NON_ROOT_USER}\";" || {
          echo "ERROR: Failed to set default sequence privileges"
          exit 1
        }

        echo "Setting default privileges for functions..."
        psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO \"${POSTGRES_NON_ROOT_USER}\";" || {
          echo "ERROR: Failed to set default function privileges"
          exit 1
        }

        echo "Successfully created n8n database user: ${POSTGRES_NON_ROOT_USER}"
      fi

      # Verify the user was created successfully
      echo "Verifying user creation..."
      if psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" -c "SELECT usename, usesuper FROM pg_user WHERE usename='${POSTGRES_NON_ROOT_USER}';" | grep -q "${POSTGRES_NON_ROOT_USER}"; then
        echo "âœ“ User ${POSTGRES_NON_ROOT_USER} verified successfully"
      else
        echo "ERROR: User verification failed"
        exit 1
      fi

    else
      echo "WARNING: POSTGRES_NON_ROOT_USER or POSTGRES_NON_ROOT_PASSWORD not set"
      echo "Available environment variables:"
      env | grep POSTGRES || echo "No POSTGRES environment variables found"
      echo "Skipping non-root user creation. n8n will use the postgres superuser."
    fi

    echo "=== Database initialization complete ==="

---
apiVersion: v1
kind: ConfigMap
metadata:
 name: postgres-init-script-wrapper
 namespace: n8n
 labels:
   app.kubernetes.io/name: postgres
   app.kubernetes.io/component: database
data:
 init-n8n-user-wrapper.sh: |
   #!/bin/bash
   # PostgreSQL initialization wrapper script to ensure proper execution permissions
   # This script runs as the postgres user and calls the main init script

   set -e

   echo "=== PostgreSQL Init Script Wrapper ==="
   echo "Running as user: $(whoami)"
   echo "Script location: /docker-entrypoint-initdb.d/init-n8n-user.sh"

   # Ensure the init script is executable
   chmod +x /docker-entrypoint-initdb.d/init-n8n-user.sh

   # Execute the main init script
   exec /docker-entrypoint-initdb.d/init-n8n-user.sh
