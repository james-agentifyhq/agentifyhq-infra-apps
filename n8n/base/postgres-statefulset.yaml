apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: n8n
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999  # postgres user
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault

      containers:
      - name: postgres
        image: postgres:16-alpine
        imagePullPolicy: IfNotPresent

        # Security context for the container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # PostgreSQL needs to write to its directory
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
              - ALL

        # Environment variables from secret
        envFrom:
        - secretRef:
            name: postgres-secret

        # Additional environment variables
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata

        # Resource limits and requests
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi

        # Health checks
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6

        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6

        # Startup probe for slow-starting container
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30

        # Port configuration
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP

        # Volume mounts
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql

      # Additional volumes for security
      volumes:
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}

  # Persistent volume claim template
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      # Optional: Specify storage class
      # storageClassName: fast-ssd