# Patch for n8n deployment - production environment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: n8n
spec:
  # Three replicas for production (HPA will scale beyond this)
  replicas: 3

  # More conservative rolling update for production
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  template:
    metadata:
      annotations:
        # Enable Prometheus metrics scraping
        prometheus.io/scrape: "true"
        prometheus.io/port: "5678"
        prometheus.io/path: "/metrics"

    spec:
      # Add node affinity for production nodes
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - production
        # Strong pod anti-affinity for high availability
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - n8n
            topologyKey: kubernetes.io/hostname

      containers:
      - name: n8n
        # High resource requirements for production
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 2Gi

        # More aggressive health checks for production
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3

      # Add topology spread constraints for better distribution
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: n8n

---
# Patch for PostgreSQL StatefulSet - production environment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: n8n
spec:
  template:
    metadata:
      annotations:
        # Enable Prometheus postgres exporter sidecar if needed
        prometheus.io/scrape: "false"

    spec:
      # Node affinity for production database
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: workload-type
                operator: In
                values:
                - database

      containers:
      - name: postgres
        # High resource requirements for production database
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi

  # Large volume for production
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      # Use fast storage class for production
      # storageClassName: fast-ssd

---
# Patch for n8n PVC - production environment
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-data
  namespace: n8n
spec:
  resources:
    requests:
      storage: 20Gi
  # Use fast storage class for production
  # storageClassName: fast-ssd

---
# Patch for IngressRoute - production environment
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: n8n
  namespace: n8n
  annotations:
    # Enable rate limiting for production
    traefik.ingress.kubernetes.io/router.middlewares: n8n-prod-rate-limit@kubernetescrd
spec:
  routes:
  - match: Host(`n8n.example.com`)
    kind: Rule
    services:
    - name: n8n
      port: 80
    middlewares:
    - name: security-headers
    - name: rate-limit